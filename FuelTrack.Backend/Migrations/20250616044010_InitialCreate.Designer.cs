// <auto-generated />
using System;
using FuelTrack.Backend.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelTrack.Backend.Migrations
{
    [DbContext(typeof(FuelTrackDbContext))]
    [Migration("20250616044010_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FuelTrack.Backend.Domain.Orders.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TerminalName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FuelTrack.Backend.Domain.Orders.Entities.Order", b =>
                {
                    b.OwnsMany("FuelTrack.Backend.Domain.Orders.ValueObjects.Payment", "Payments", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<string>("Bank")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("OperationCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("OrderId", "Id");

                            b1.ToTable("Orders_Payments");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsMany("FuelTrack.Backend.Domain.Orders.Entities.OrderProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<string>("FuelType")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Note")
                                .HasColumnType("longtext");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("OrderId", "Id");

                            b1.ToTable("OrderProduct");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");

                            b1.OwnsMany("FuelTrack.Backend.Domain.Orders.ValueObjects.Payment", "Payments", b2 =>
                                {
                                    b2.Property<Guid>("OrderProductOrderId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("OrderProductId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<decimal>("Amount")
                                        .HasColumnType("decimal(65,30)");

                                    b2.Property<string>("Bank")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<DateTime>("Date")
                                        .HasColumnType("datetime(6)");

                                    b2.Property<string>("OperationCode")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.HasKey("OrderProductOrderId", "OrderProductId", "Id");

                                    b2.ToTable("OrderProduct_Payments");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderProductOrderId", "OrderProductId");
                                });

                            b1.Navigation("Payments");
                        });

                    b.Navigation("Payments");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
